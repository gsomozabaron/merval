<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema 

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.BackgroundImage" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        ERAEREAREQAlS9wPkiIQL3A+SoKIgP/Z
</value>
  </data>
</root>